# specify version format
version: "{build}"

image:
  - Visual Studio 2019
  - ubuntu1804
  - macos

platform:
  - x64

# specify custom environment variables
environment:
  APPVEYOR_SAVE_CACHE_ON_ERROR: true

# build configuration, i.e. Debug, Release, etc.
configuration:
  - Debug
  - Release

# branches to build
branches:
  # blacklist
  except:
    - gh-pages

for:
-
  #------------------
  # Windows 10
  #------------------
  matrix:
    only:
      - image: Visual Studio 2019
  # scripts that are called at very beginning, before repo cloning
  init:
    - ver
    - cmake --version
    - msbuild /version
  # scripts that run after cloning repository
  install:
    # update vcpkg
    - cd C:\tools\vcpkg
    - git pull
    - .\bootstrap-vcpkg.bat
    - if "%platform%"=="Win32" set VCPKG_ARCH=x86-windows
    - if "%platform%"=="x64"   set VCPKG_ARCH=x64-windows
    # remove outdated versions
    - vcpkg remove --outdated --recurse
    # install dependencies
    - vcpkg install --recurse --triplet %VCPKG_ARCH% zlib boost-iostreams boost-program-options boost-system boost-serialization eigen3 cgal[core] opencv vcglib glew glfw3
    - cd "%APPVEYOR_BUILD_FOLDER%"
  # preserve contents of selected directories and files across project builds
  cache:
    - 'C:\tools\vcpkg\installed'
  build_script:
    - if "%platform%"=="Win32" set CMAKE_ARCH=-A"x86"
    - if "%platform%"=="x64"   set CMAKE_ARCH=-A"x64"
    - mkdir bin && cd bin
    - cmake -G"Visual Studio 16 2019" %CMAKE_ARCH% -DCMAKE_BUILD_TYPE=%Configuration% -DCMAKE_TOOLCHAIN_FILE="C:\tools\vcpkg\scripts\buildsystems\vcpkg.cmake" ..
    - cmake --build . --target ALL_BUILD --config %Configuration% -- /maxcpucount:4
-
  #------------------
  # Ubuntu 18.04 LTS
  #------------------
  matrix:
    only:
      - image: ubuntu1804
  # scripts that are called at very beginning, before repo cloning
  init:
    - lsb_release -a
    - cmake --version
    - gcc -v
  # scripts that run after cloning repository
  install:
    - sudo apt-get update -qq && sudo apt-get install -qq
    - sudo apt-get -y install build-essential git cmake libpng-dev libjpeg-dev libtiff-dev libglu1-mesa-dev libxmu-dev libxi-dev
    - sudo apt-get -y install libboost-iostreams-dev libboost-program-options-dev libboost-system-dev libboost-serialization-dev
    - sudo apt-get -y install libopencv-dev libcgal-dev libcgal-qt5-dev libatlas-base-dev
    - sudo apt-get -y install freeglut3-dev libglew-dev libglfw3-dev
  # preserve contents of selected directories and files across project builds
  cache:
    - '/usr/lib/x86_64-linux-gnu/'
  build_script:
    - git clone https://github.com/cdcseacave/VCG.git
    - git clone --single-branch --branch 3.4 https://gitlab.com/libeigen/eigen.git
    - mkdir eigen_build && cd eigen_build
    - cmake . ../eigen
    - make && sudo make install
    - cd ..
    - mkdir bin && cd bin
    - cmake -DCMAKE_BUILD_TYPE=$Configuration -DVCG_ROOT="$APPVEYOR_BUILD_FOLDER/VCG" ..
    - make
-
  #------------------
  # MacOS
  #------------------
  matrix:
    only:
      - image: macos
  # scripts that are called at very beginning, before repo cloning
  init:
    - system_profiler SPSoftwareDataType
    - cmake --version
    - gcc -v
  # scripts that run after cloning repository
  install:
    - brew update
    - printf "#%s/bin/bash\nbrew install libomp boost eigen opencv cgal glew glfw3\nexit 0\n" "!" > install.sh
    - chmod +x install.sh
    - ./install.sh
  # preserve contents of selected directories and files across project builds
  cache:
    - '/usr/local/Cellar/'
  build_script:
    - git clone https://github.com/cdcseacave/VCG.git
    - mkdir bin && cd bin
    - cmake -DCMAKE_BUILD_TYPE=$CONFIGURATION -DVCG_ROOT="$APPVEYOR_BUILD_FOLDER/VCG" ..
    - make
  
on_success:
  - cmd: 7z a OpenMVS_x64.7z "C:\projects\openmvs\bin\bin\vc16\x64\%Configuration%\*.exe" "C:\projects\openmvs\bin\bin\vc16\x64\%Configuration%\*.dll"
  - cmd: appveyor PushArtifact OpenMVS_x64.7z
